{"version":3,"sources":["components/Header/index.js","utils/API.js","components/Search/index.js","components/Table-Body/index.js","components/SortBtn/index.js","components/Table/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","Jumbotron","className","axios","get","Search","style","width","margin","marginBottom","marginTop","color","fontSize","type","TableBody","results","map","result","border","lineHeight","src","picture","thumbnail","alt","borderRadius","name","first","last","href","phone","email","moment","dob","date","format","SortBtn","role","tabIndex","aria-label","EmployeeTable","useState","filteredResults","currentSort","employees","setEmployees","useEffect","API","then","res","data","catch","err","console","log","onChange","event","filter","person","toLowerCase","includes","target","value","placeholder","Table","backgroundColor","onClick","sort","a","b","localeCompare","Footer","rel","App","Container","Row","Col","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.1d24074f.chunk.js","sourcesContent":["import React from 'react';\nimport { Jumbotron } from 'reactstrap';\nimport './style.css';\n\nconst Header = (props) => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1 className=\"display-3\">Employee Directory</h1>\n        <p className=\"lead\">Click on up-down arrow to sort Last Names A-Z or Z-A. Use the search box to narrow your results.</p>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default Header;","import axios from \"axios\";\nexport default {\n    // Gets all employees\n    getEmployees: function () {\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n    }\n};","import React from 'react';\n\nconst Search = (props) => {\n    return (\n        <div style={{\n            width: '20%',\n            margin: '0 auto',\n            marginBottom: '1em',\n            marginTop: '-1em',\n            color: '#CAD2C5',\n            fontSize:'large'\n        }}>Search\n            <div className=\"input-group input-group-md\" >\n                <input className=\"form-control\" type=\"text\" {...props} />\n            </div>\n        </div>\n    );\n};\n\nexport default Search;","import React from 'react';\nimport moment from 'moment';\nimport './style.css';\n\nfunction TableBody(props) {\n    return (\n        <tbody style={{\n            fontSize: 'large'\n        }}>\n            {props.results.map(result => {\n                return (\n                    <tr className='tr-group' style={{\n                        border: 'solid 5px #52796F',\n                        lineHeight:'4'\n                    }}>\n                        {/* <th scope=\"row\"></th> */}\n                        <td><img src={result.picture.thumbnail}\n                            alt=''\n                            style={{\n                                border: 'solid 2px #354f52',\n                                borderRadius: '12px'\n                            }} /></td>\n                        <td>{result.name.first + ' ' + result.name.last}</td>\n                        <td><a href={'tel:' + result.phone}>\n                            {result.phone}</a></td>\n                        <td><a href={'mailto:' + result.email}>\n                            {result.email}</a></td>\n                        <td>{moment(result.dob.date).format('MM/DD/YYYY')}</td>\n                    </tr>\n                )\n            }\n            )}\n        </tbody>\n    )\n};\n\nexport default TableBody;\n","import React from \"react\";\n\nfunction SortBtn(props) {\n\n    return (\n        <span\n            {...props}\n            className=\"sort-btn\"\n            role=\"img\"\n            tabIndex=\"0\"\n            aria-label='sort-up icon'\n            style={{ color: '#394C56' }}\n        >\n            &nbsp;&#8645;\n        </span>\n    );\n}\n\nexport default SortBtn;\n","import React, { useState, useEffect } from 'react';\nimport API from '../../utils/API';\nimport Search from '../Search';\nimport { Table } from 'reactstrap';\nimport TableBody from '../Table-Body';\nimport SortBtn from '../SortBtn';\n\nfunction EmployeeTable() {\n\n    const [employees, setEmployees] = useState({\n        results: [],\n        filteredResults: [],\n        currentSort: 'up'\n    });\n\n    useEffect(loadEmployees, []);\n\n    function loadEmployees() {\n        API.getEmployees()\n            .then(res =>\n                setEmployees({\n                    results: res.data.results,\n                    filteredResults: res.data.results\n                })).catch(err => console.log(err));\n    };\n\n    const searchFilter = (event) => {\n        setEmployees({\n            ...employees,\n            filteredResults: employees.results.filter(\n                person => person.name.first.toLowerCase().includes(\n                    event.target.value.toLowerCase())\n                    || person.name.last.toLowerCase().includes(\n                        event.target.value.toLowerCase())\n            )\n        })\n    };\n\n    const sortFilter = () => {\n        if (employees.currentSort === 'up') {\n            setEmployees({\n                ...employees,\n                filteredResults: employees.filteredResults.sort(\n                    (a, b) => a.name.last.localeCompare(b.name.last)),\n                currentSort: 'down'\n            })\n        }\n        else {\n            setEmployees({\n                ...employees,\n                filteredResults: employees.filteredResults.sort(\n                    (a, b) => b.name.last.localeCompare(a.name.last)),\n                currentSort: 'up'\n            })\n        }\n    };\n\n    return (\n        <div>\n            <Search\n                onChange={searchFilter}\n                placeholder='Jane Wang'\n            />\n            <Table style={{\n            }}>\n                <thead style={{ backgroundColor: '#CAD2C5' }}>\n                    <th>Image</th>\n                    <th>\n                        Name\n                        <SortBtn onClick={sortFilter} />\n                    </th>\n                    <th>Phone Number</th>\n                    <th>Email</th>\n                    <th>DOB</th>\n                </thead>\n                <TableBody\n                    results={employees.filteredResults}\n                />\n            </Table>\n        </div>\n    )\n};\n\nexport default EmployeeTable;\n","import React from 'react';\r\n\r\nconst Footer = (props) => {\r\n  return (\r\n    <div>\r\n     <a href='https://github.com/Jack-Aaron' rel='noopener noreferrer' target='_blank'>Jonathan Alpart AKA Jack Aaron 2020</a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Header from './components/Header';\nimport { Container, Row, Col } from 'reactstrap';\nimport EmployeeTable from './components/Table';\nimport Footer from './components/Footer';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Container>\n        <Row>\n          <Col>\n            <EmployeeTable />\n          </Col>\n        </Row>\n      </Container>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}